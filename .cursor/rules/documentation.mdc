---
description: Documentation and code change guidelines
globs: **/*
alwaysApply: true
---

# Documentation and Code Change Guidelines

When working on this Django fintech credit card platform, **ALWAYS** reference the project documentation before and after making changes.

## **Primary Documentation Resources:**

### **Project Documentation:**
- **`CLAUDE.md`** - Project overview, architecture, development patterns (this file)
- **`README.md`** - Main project documentation with quick start
- **`RUNNING.md`** - Comprehensive setup and troubleshooting guide
- **`QUICKSTART.md`** - Quick reference for common tasks
- **`docs/CARD_IMPORT_GUIDE.md`** - Credit card import system documentation

### **Key Files:**
- **Recommendation Engine**: `roadmaps/recommendation_engine.py` - Core business logic (1,923 lines)
- **Data Import**: `cards/management/commands/import_cards.py` - Card data import system
- **Interactive Script**: `manage_project.py` - Menu-driven development tool

## **Development Guidelines:**

### **Before Making Changes:**
1. **Read `CLAUDE.md`** to understand project architecture and patterns
2. **Check relevant documentation** (RUNNING.md, CARD_IMPORT_GUIDE.md, etc.)
3. **Review the actual code** you're modifying to understand current implementation
4. **Follow established Django and project patterns**

### **After Making Changes:**
1. **Update documentation** if you changed functionality
2. **Update `CLAUDE.md`** if you changed architecture or core patterns
3. **Update relevant guides** (RUNNING.md, QUICKSTART.md, etc.) if you changed workflows
4. **Add/update tests** to cover new functionality

### **For Bug Fixes:**
- Understand the intended behavior from documentation
- Review related code for potential interaction issues
- Test thoroughly before committing

### **For New Features:**
- Study similar existing functionality in the codebase
- Follow established patterns (Django REST Framework, session management, etc.)
- Maintain consistency with existing API patterns and data structures
- Document the new feature appropriately

### **Django App Structure:**
- **`cards/`**: Credit card models, recommendation logic, data import
- **`roadmaps/`**: Recommendation engine, portfolio optimization, user roadmaps  
- **`users/`**: User profiles, preferences, authentication
- **`creditcard_guru/`**: Project configuration, URL routing, deployment settings

## **Code Quality Standards:**
- Follow Django REST Framework patterns for API endpoints
- Use session-based tracking for anonymous users
- Maintain consistent error handling and validation
- Write clear, descriptive commit messages

## **Testing Approach:**
- Use `python manage_project.py` for common development tasks
- Run tests with `python manage.py test`
- Test both authenticated and anonymous user workflows
- Verify imports work with the verified flag system

## **Documentation Maintenance:**
When you make changes, update these files as appropriate:
- **Architecture changes** → Update `CLAUDE.md`
- **New features/workflows** → Update `RUNNING.md` and `QUICKSTART.md`
- **Import system changes** → Update `docs/CARD_IMPORT_GUIDE.md`
- **Deployment changes** → Update `docs/DEPLOYMENT_GUIDE.md`

**Remember**: Documentation should reflect the current state of the codebase. When you change code, update the relevant documentation!