{
  "class": [
    "cls:cards/admin.py.CardCreditAdmin",
    "cls:cards/admin.py.CardCreditInline",
    "cls:cards/admin.py.CreditCardAdmin",
    "cls:cards/admin.py.CreditTypeAdmin",
    "cls:cards/admin.py.IssuerAdmin",
    "cls:cards/admin.py.RewardCategoryAdmin",
    "cls:cards/admin.py.RewardCategoryInline",
    "cls:cards/admin.py.RewardTypeAdmin",
    "cls:cards/admin.py.SpendingAmountInline",
    "cls:cards/admin.py.SpendingCategoryAdmin",
    "cls:cards/admin.py.UserCardAdmin",
    "cls:cards/admin.py.UserCreditPreferenceInline",
    "cls:cards/admin.py.UserSpendingProfileAdmin",
    "cls:cards/admin.py.admin.ModelAdmin",
    "cls:cards/admin.py.admin.TabularInline",
    "cls:cards/apps.py.AppConfig",
    "cls:cards/apps.py.CardsConfig",
    "cls:cards/management/commands/import_cards.py.BaseCommand",
    "cls:cards/management/commands/import_cards.py.Command",
    "cls:cards/management/commands/import_credit_types.py.BaseCommand",
    "cls:cards/management/commands/import_credit_types.py.Command",
    "cls:cards/management/commands/import_spending_credits.py.BaseCommand",
    "cls:cards/management/commands/import_spending_credits.py.Command",
    "cls:cards/management/commands/run_scenario.py.BaseCommand",
    "cls:cards/management/commands/run_scenario.py.Command",
    "cls:cards/migrations/0001_initial.py.Migration",
    "cls:cards/migrations/0001_initial.py.migrations.Migration",
    "cls:cards/models.py.CardCredit",
    "cls:cards/models.py.CreditCard",
    "cls:cards/models.py.CreditType",
    "cls:cards/models.py.Issuer",
    "cls:cards/models.py.Meta",
    "cls:cards/models.py.RewardCategory",
    "cls:cards/models.py.RewardType",
    "cls:cards/models.py.SpendingAmount",
    "cls:cards/models.py.SpendingCategory",
    "cls:cards/models.py.SpendingCredit",
    "cls:cards/models.py.UserCard",
    "cls:cards/models.py.UserCreditPreference",
    "cls:cards/models.py.UserSpendingCreditPreference",
    "cls:cards/models.py.UserSpendingProfile",
    "cls:cards/models.py.models.Model",
    "cls:cards/scenario_loader.py.ScenarioLoader",
    "cls:cards/serializers.py.CardCreditSerializer",
    "cls:cards/serializers.py.CreateSpendingProfileSerializer",
    "cls:cards/serializers.py.CreditCardListSerializer",
    "cls:cards/serializers.py.CreditCardSerializer",
    "cls:cards/serializers.py.IssuerSerializer",
    "cls:cards/serializers.py.Meta",
    "cls:cards/serializers.py.RewardCategorySerializer",
    "cls:cards/serializers.py.RewardTypeSerializer",
    "cls:cards/serializers.py.SpendingAmountSerializer",
    "cls:cards/serializers.py.SpendingCategorySerializer",
    "cls:cards/serializers.py.SpendingCreditSerializer",
    "cls:cards/serializers.py.UserCardCreateUpdateSerializer",
    "cls:cards/serializers.py.UserCardSerializer",
    "cls:cards/serializers.py.UserSpendingProfileSerializer",
    "cls:cards/serializers.py.serializers.ModelSerializer",
    "cls:cards/serializers.py.serializers.Serializer",
    "cls:cards/views.py.CreditCardDetailView",
    "cls:cards/views.py.CreditCardListView",
    "cls:cards/views.py.IssuerListView",
    "cls:cards/views.py.RewardTypeListView",
    "cls:cards/views.py.SpendingCategoryListView",
    "cls:cards/views.py.SpendingCreditListView",
    "cls:cards/views.py.generics.ListAPIView",
    "cls:cards/views.py.generics.RetrieveAPIView",
    "cls:roadmaps/admin.py.RoadmapAdmin",
    "cls:roadmaps/admin.py.RoadmapCalculationAdmin",
    "cls:roadmaps/admin.py.RoadmapCalculationInline",
    "cls:roadmaps/admin.py.RoadmapFilterAdmin",
    "cls:roadmaps/admin.py.RoadmapRecommendationAdmin",
    "cls:roadmaps/admin.py.RoadmapRecommendationInline",
    "cls:roadmaps/admin.py.admin.ModelAdmin",
    "cls:roadmaps/admin.py.admin.StackedInline",
    "cls:roadmaps/admin.py.admin.TabularInline",
    "cls:roadmaps/apps.py.AppConfig",
    "cls:roadmaps/apps.py.RoadmapsConfig",
    "cls:roadmaps/migrations/0001_initial.py.Migration",
    "cls:roadmaps/migrations/0001_initial.py.migrations.Migration",
    "cls:roadmaps/models.py.Meta",
    "cls:roadmaps/models.py.Roadmap",
    "cls:roadmaps/models.py.RoadmapCalculation",
    "cls:roadmaps/models.py.RoadmapFilter",
    "cls:roadmaps/models.py.RoadmapRecommendation",
    "cls:roadmaps/models.py.models.Model",
    "cls:roadmaps/recommendation_engine.py.RecommendationEngine",
    "cls:roadmaps/serializers.py.CreateRoadmapSerializer",
    "cls:roadmaps/serializers.py.GenerateRoadmapSerializer",
    "cls:roadmaps/serializers.py.Meta",
    "cls:roadmaps/serializers.py.RoadmapCalculationSerializer",
    "cls:roadmaps/serializers.py.RoadmapFilterSerializer",
    "cls:roadmaps/serializers.py.RoadmapRecommendationSerializer",
    "cls:roadmaps/serializers.py.RoadmapSerializer",
    "cls:roadmaps/serializers.py.serializers.ModelSerializer",
    "cls:roadmaps/serializers.py.serializers.Serializer",
    "cls:roadmaps/views.py.RoadmapDetailView",
    "cls:roadmaps/views.py.RoadmapFilterListView",
    "cls:roadmaps/views.py.RoadmapListView",
    "cls:roadmaps/views.py.generics.ListAPIView",
    "cls:roadmaps/views.py.generics.ListCreateAPIView",
    "cls:roadmaps/views.py.generics.RetrieveUpdateDestroyAPIView",
    "cls:users/apps.py.AppConfig",
    "cls:users/apps.py.UsersConfig",
    "cls:users/migrations/0001_initial.py.Migration",
    "cls:users/migrations/0001_initial.py.migrations.Migration",
    "cls:users/models.py.Meta",
    "cls:users/models.py.UserPreferences",
    "cls:users/models.py.UserProfile",
    "cls:users/models.py.models.Model",
    "cls:users/serializers.py.Meta",
    "cls:users/serializers.py.UserCardSerializer",
    "cls:users/serializers.py.UserDataSerializer",
    "cls:users/serializers.py.UserPreferencesSerializer",
    "cls:users/serializers.py.UserProfileSerializer",
    "cls:users/serializers.py.UserSerializer",
    "cls:users/serializers.py.UserSpendingSerializer",
    "cls:users/serializers.py.serializers.ModelSerializer",
    "cls:users/serializers.py.serializers.Serializer",
    "cls:users/views.py.UserCardDetailView",
    "cls:users/views.py.UserCardListView",
    "cls:users/views.py.UserPreferencesView",
    "cls:users/views.py.UserProfileView",
    "cls:users/views.py.UserSpendingListView",
    "cls:users/views.py.generics.ListCreateAPIView",
    "cls:users/views.py.generics.RetrieveUpdateAPIView",
    "cls:users/views.py.generics.RetrieveUpdateDestroyAPIView"
  ],
  "function": [
    "func:admin.py.Path",
    "func:admin.py.add",
    "func:admin.py.all",
    "func:admin.py.argparse.ArgumentParser",
    "func:admin.py.cards_dir.exists",
    "func:admin.py.cards_dir.glob",
    "func:admin.py.check_deployment",
    "func:admin.py.collect_static",
    "func:admin.py.commands.items",
    "func:admin.py.common_workflows.items",
    "func:admin.py.create_superuser",
    "func:admin.py.data_dir.exists",
    "func:admin.py.data_dir.glob",
    "func:admin.py.db_file.exists",
    "func:admin.py.db_file.unlink",
    "func:admin.py.django.setup",
    "func:admin.py.env_file.exists",
    "func:admin.py.execute_task",
    "func:admin.py.exists",
    "func:admin.py.file_path.exists",
    "func:admin.py.flush_database",
    "func:admin.py.full_setup",
    "func:admin.py.get",
    "func:admin.py.get_or_create",
    "func:admin.py.hasattr",
    "func:admin.py.import_data",
    "func:admin.py.import_parser.add_argument",
    "func:admin.py.import_sample_data",
    "func:admin.py.imported_files.add",
    "func:admin.py.input",
    "func:admin.py.install_dependencies",
    "func:admin.py.len",
    "func:admin.py.line.startswith",
    "func:admin.py.line.strip",
    "func:admin.py.list",
    "func:admin.py.lower",
    "func:admin.py.main",
    "func:admin.py.migration_file.unlink",
    "func:admin.py.migrations_dir.exists",
    "func:admin.py.migrations_dir.glob",
    "func:admin.py.open",
    "func:admin.py.parser.add_subparsers",
    "func:admin.py.parser.parse_args",
    "func:admin.py.parser.print_help",
    "func:admin.py.print",
    "func:admin.py.response.lower",
    "func:admin.py.run_command",
    "func:admin.py.run_server",
    "func:admin.py.run_tests",
    "func:admin.py.server_parser.add_argument",
    "func:admin.py.set",
    "func:admin.py.setdefault",
    "func:admin.py.setup_database",
    "func:admin.py.setup_environment",
    "func:admin.py.setup_google_oauth",
    "func:admin.py.shell",
    "func:admin.py.show_all_commands",
    "func:admin.py.show_interactive_menu",
    "func:admin.py.show_urls",
    "func:admin.py.social_app.save",
    "func:admin.py.sorted",
    "func:admin.py.split",
    "func:admin.py.str",
    "func:admin.py.strip",
    "func:admin.py.subparsers.add_parser",
    "func:admin.py.subprocess.run",
    "func:admin.py.sys.exit",
    "func:admin.py.system_dir.exists",
    "func:admin.py.system_dir.glob",
    "func:admin.py.wipe_database",
    "func:analyze_scenarios.py.any",
    "func:analyze_scenarios.py.append",
    "func:analyze_scenarios.py.cat_name.replace",
    "func:analyze_scenarios.py.categories.items",
    "func:analyze_scenarios.py.categories.values",
    "func:analyze_scenarios.py.categorize_scenarios",
    "func:analyze_scenarios.py.json.load",
    "func:analyze_scenarios.py.len",
    "func:analyze_scenarios.py.load_scenarios",
    "func:analyze_scenarios.py.name.lower",
    "func:analyze_scenarios.py.open",
    "func:analyze_scenarios.py.print",
    "func:analyze_scenarios.py.print_analysis",
    "func:analyze_scenarios.py.sum",
    "func:analyze_scenarios.py.title",
    "func:cards/management/commands/import_cards.py.ERROR",
    "func:cards/management/commands/import_cards.py.SUCCESS",
    "func:cards/management/commands/import_cards.py.WARNING",
    "func:cards/management/commands/import_cards.py.add_arguments",
    "func:cards/management/commands/import_cards.py.all",
    "func:cards/management/commands/import_cards.py.basename",
    "func:cards/management/commands/import_cards.py.card.save",
    "func:cards/management/commands/import_cards.py.card_data.get",
    "func:cards/management/commands/import_cards.py.category.save",
    "func:cards/management/commands/import_cards.py.category_data.get",
    "func:cards/management/commands/import_cards.py.count",
    "func:cards/management/commands/import_cards.py.credit_data.get",
    "func:cards/management/commands/import_cards.py.data.get",
    "func:cards/management/commands/import_cards.py.date",
    "func:cards/management/commands/import_cards.py.datetime.strptime",
    "func:cards/management/commands/import_cards.py.delete",
    "func:cards/management/commands/import_cards.py.exclude",
    "func:cards/management/commands/import_cards.py.exists",
    "func:cards/management/commands/import_cards.py.filter",
    "func:cards/management/commands/import_cards.py.get",
    "func:cards/management/commands/import_cards.py.get_or_create",
    "func:cards/management/commands/import_cards.py.handle",
    "func:cards/management/commands/import_cards.py.import_card_credits",
    "func:cards/management/commands/import_cards.py.import_credit_cards",
    "func:cards/management/commands/import_cards.py.import_data",
    "func:cards/management/commands/import_cards.py.import_issuers",
    "func:cards/management/commands/import_cards.py.import_personal_cards",
    "func:cards/management/commands/import_cards.py.import_reward_categories",
    "func:cards/management/commands/import_cards.py.import_reward_types",
    "func:cards/management/commands/import_cards.py.import_spending_categories",
    "func:cards/management/commands/import_cards.py.isinstance",
    "func:cards/management/commands/import_cards.py.issuer_data.get",
    "func:cards/management/commands/import_cards.py.json.load",
    "func:cards/management/commands/import_cards.py.lower",
    "func:cards/management/commands/import_cards.py.open",
    "func:cards/management/commands/import_cards.py.parser.add_argument",
    "func:cards/management/commands/import_cards.py.self.import_card_credits",
    "func:cards/management/commands/import_cards.py.self.import_credit_cards",
    "func:cards/management/commands/import_cards.py.self.import_data",
    "func:cards/management/commands/import_cards.py.self.import_issuers",
    "func:cards/management/commands/import_cards.py.self.import_personal_cards",
    "func:cards/management/commands/import_cards.py.self.import_reward_categories",
    "func:cards/management/commands/import_cards.py.self.import_reward_types",
    "func:cards/management/commands/import_cards.py.self.import_spending_categories",
    "func:cards/management/commands/import_cards.py.signup_bonus.get",
    "func:cards/management/commands/import_cards.py.slugify",
    "func:cards/management/commands/import_cards.py.subcat_data.get",
    "func:cards/management/commands/import_cards.py.subcategory.save",
    "func:cards/management/commands/import_cards.py.write",
    "func:cards/management/commands/import_credit_types.py.ERROR",
    "func:cards/management/commands/import_credit_types.py.SUCCESS",
    "func:cards/management/commands/import_credit_types.py.WARNING",
    "func:cards/management/commands/import_credit_types.py.all_credits.add",
    "func:cards/management/commands/import_credit_types.py.any",
    "func:cards/management/commands/import_credit_types.py.basename",
    "func:cards/management/commands/import_credit_types.py.card.get",
    "func:cards/management/commands/import_credit_types.py.categorize_credit",
    "func:cards/management/commands/import_credit_types.py.category_icons.get",
    "func:cards/management/commands/import_credit_types.py.credit.get",
    "func:cards/management/commands/import_credit_types.py.credit_name.lower",
    "func:cards/management/commands/import_credit_types.py.credit_type.save",
    "func:cards/management/commands/import_credit_types.py.description.lower",
    "func:cards/management/commands/import_credit_types.py.description.strip",
    "func:cards/management/commands/import_credit_types.py.get_credit_icon",
    "func:cards/management/commands/import_credit_types.py.get_or_create",
    "func:cards/management/commands/import_credit_types.py.get_sort_order",
    "func:cards/management/commands/import_credit_types.py.glob.glob",
    "func:cards/management/commands/import_credit_types.py.handle",
    "func:cards/management/commands/import_credit_types.py.json.load",
    "func:cards/management/commands/import_credit_types.py.len",
    "func:cards/management/commands/import_credit_types.py.normalize_credit_description",
    "func:cards/management/commands/import_credit_types.py.open",
    "func:cards/management/commands/import_credit_types.py.self.categorize_credit",
    "func:cards/management/commands/import_credit_types.py.self.get_credit_icon",
    "func:cards/management/commands/import_credit_types.py.self.get_sort_order",
    "func:cards/management/commands/import_credit_types.py.self.normalize_credit_description",
    "func:cards/management/commands/import_credit_types.py.set",
    "func:cards/management/commands/import_credit_types.py.slugify",
    "func:cards/management/commands/import_credit_types.py.sort_orders.get",
    "func:cards/management/commands/import_credit_types.py.sorted",
    "func:cards/management/commands/import_credit_types.py.strip",
    "func:cards/management/commands/import_credit_types.py.write",
    "func:cards/management/commands/import_spending_credits.py.ERROR",
    "func:cards/management/commands/import_spending_credits.py.SUCCESS",
    "func:cards/management/commands/import_spending_credits.py.WARNING",
    "func:cards/management/commands/import_spending_credits.py.add_arguments",
    "func:cards/management/commands/import_spending_credits.py.all",
    "func:cards/management/commands/import_spending_credits.py.credit.save",
    "func:cards/management/commands/import_spending_credits.py.credit_data.get",
    "func:cards/management/commands/import_spending_credits.py.delete",
    "func:cards/management/commands/import_spending_credits.py.exists",
    "func:cards/management/commands/import_spending_credits.py.get",
    "func:cards/management/commands/import_spending_credits.py.get_or_create",
    "func:cards/management/commands/import_spending_credits.py.handle",
    "func:cards/management/commands/import_spending_credits.py.json.load",
    "func:cards/management/commands/import_spending_credits.py.open",
    "func:cards/management/commands/import_spending_credits.py.parser.add_argument",
    "func:cards/management/commands/import_spending_credits.py.slugify",
    "func:cards/management/commands/import_spending_credits.py.write",
    "func:cards/management/commands/run_scenario.py.CommandError",
    "func:cards/management/commands/run_scenario.py.Decimal",
    "func:cards/management/commands/run_scenario.py.ERROR",
    "func:cards/management/commands/run_scenario.py.HTTP_INFO",
    "func:cards/management/commands/run_scenario.py.RecommendationEngine",
    "func:cards/management/commands/run_scenario.py.SUCCESS",
    "func:cards/management/commands/run_scenario.py.ScenarioLoader.load_scenarios",
    "func:cards/management/commands/run_scenario.py.ValueError",
    "func:cards/management/commands/run_scenario.py.WARNING",
    "func:cards/management/commands/run_scenario.py.abs",
    "func:cards/management/commands/run_scenario.py.action_style",
    "func:cards/management/commands/run_scenario.py.add_arguments",
    "func:cards/management/commands/run_scenario.py.all",
    "func:cards/management/commands/run_scenario.py.any",
    "func:cards/management/commands/run_scenario.py.card_data.get",
    "func:cards/management/commands/run_scenario.py.cat_data.get",
    "func:cards/management/commands/run_scenario.py.category.title",
    "func:cards/management/commands/run_scenario.py.category_data.get",
    "func:cards/management/commands/run_scenario.py.category_mapping.get",
    "func:cards/management/commands/run_scenario.py.create_credit_card",
    "func:cards/management/commands/run_scenario.py.create_credit_card_from_name",
    "func:cards/management/commands/run_scenario.py.create_credit_card_from_slug",
    "func:cards/management/commands/run_scenario.py.create_test_scenario",
    "func:cards/management/commands/run_scenario.py.create_test_setup_data",
    "func:cards/management/commands/run_scenario.py.create_user",
    "func:cards/management/commands/run_scenario.py.data.get",
    "func:cards/management/commands/run_scenario.py.date.today",
    "func:cards/management/commands/run_scenario.py.delete",
    "func:cards/management/commands/run_scenario.py.dirname",
    "func:cards/management/commands/run_scenario.py.display_results",
    "func:cards/management/commands/run_scenario.py.engine.generate_quick_recommendations",
    "func:cards/management/commands/run_scenario.py.enumerate",
    "func:cards/management/commands/run_scenario.py.existing_user.delete",
    "func:cards/management/commands/run_scenario.py.exists",
    "func:cards/management/commands/run_scenario.py.expected.get",
    "func:cards/management/commands/run_scenario.py.filter",
    "func:cards/management/commands/run_scenario.py.float",
    "func:cards/management/commands/run_scenario.py.get",
    "func:cards/management/commands/run_scenario.py.get_or_create",
    "func:cards/management/commands/run_scenario.py.handle",
    "func:cards/management/commands/run_scenario.py.hasattr",
    "func:cards/management/commands/run_scenario.py.issuer_data.get",
    "func:cards/management/commands/run_scenario.py.issues.append",
    "func:cards/management/commands/run_scenario.py.issues.extend",
    "func:cards/management/commands/run_scenario.py.item.get",
    "func:cards/management/commands/run_scenario.py.items",
    "func:cards/management/commands/run_scenario.py.join",
    "func:cards/management/commands/run_scenario.py.json.load",
    "func:cards/management/commands/run_scenario.py.len",
    "func:cards/management/commands/run_scenario.py.list_scenarios",
    "func:cards/management/commands/run_scenario.py.lower",
    "func:cards/management/commands/run_scenario.py.open",
    "func:cards/management/commands/run_scenario.py.parser.add_argument",
    "func:cards/management/commands/run_scenario.py.primary_categories.append",
    "func:cards/management/commands/run_scenario.py.rec.get",
    "func:cards/management/commands/run_scenario.py.recommended_categories.add",
    "func:cards/management/commands/run_scenario.py.replace",
    "func:cards/management/commands/run_scenario.py.rt_data.get",
    "func:cards/management/commands/run_scenario.py.run_all_scenarios",
    "func:cards/management/commands/run_scenario.py.run_scenario",
    "func:cards/management/commands/run_scenario.py.run_single_scenario",
    "func:cards/management/commands/run_scenario.py.scenario.get",
    "func:cards/management/commands/run_scenario.py.scenario_data.get",
    "func:cards/management/commands/run_scenario.py.self.create_credit_card",
    "func:cards/management/commands/run_scenario.py.self.create_credit_card_from_slug",
    "func:cards/management/commands/run_scenario.py.self.create_test_scenario",
    "func:cards/management/commands/run_scenario.py.self.create_test_setup_data",
    "func:cards/management/commands/run_scenario.py.self.display_results",
    "func:cards/management/commands/run_scenario.py.self.list_scenarios",
    "func:cards/management/commands/run_scenario.py.self.run_all_scenarios",
    "func:cards/management/commands/run_scenario.py.self.run_scenario",
    "func:cards/management/commands/run_scenario.py.self.run_single_scenario",
    "func:cards/management/commands/run_scenario.py.self.setup_test_data",
    "func:cards/management/commands/run_scenario.py.self.validate_breakdown_accuracy",
    "func:cards/management/commands/run_scenario.py.self.validate_card_count_optimization",
    "func:cards/management/commands/run_scenario.py.self.validate_expectations",
    "func:cards/management/commands/run_scenario.py.self.validate_portfolio_optimization",
    "func:cards/management/commands/run_scenario.py.self.validate_zero_fee_optimization",
    "func:cards/management/commands/run_scenario.py.set",
    "func:cards/management/commands/run_scenario.py.setup_test_data",
    "func:cards/management/commands/run_scenario.py.spending.items",
    "func:cards/management/commands/run_scenario.py.spending.values",
    "func:cards/management/commands/run_scenario.py.str",
    "func:cards/management/commands/run_scenario.py.sum",
    "func:cards/management/commands/run_scenario.py.timedelta",
    "func:cards/management/commands/run_scenario.py.upper",
    "func:cards/management/commands/run_scenario.py.validate_breakdown_accuracy",
    "func:cards/management/commands/run_scenario.py.validate_card_count_optimization",
    "func:cards/management/commands/run_scenario.py.validate_expectations",
    "func:cards/management/commands/run_scenario.py.validate_portfolio_optimization",
    "func:cards/management/commands/run_scenario.py.validate_zero_fee_optimization",
    "func:cards/management/commands/run_scenario.py.write",
    "func:cards/models.py.__str__",
    "func:cards/models.py.annual_value",
    "func:cards/models.py.apply_url",
    "func:cards/models.py.display_name",
    "func:cards/models.py.exists",
    "func:cards/models.py.float",
    "func:cards/models.py.generate_share_uuid",
    "func:cards/models.py.get",
    "func:cards/models.py.is_active",
    "func:cards/models.py.is_parent_category",
    "func:cards/models.py.is_public",
    "func:cards/models.py.is_subcategory",
    "func:cards/models.py.isinstance",
    "func:cards/models.py.referral_url",
    "func:cards/models.py.reverse",
    "func:cards/models.py.self.save",
    "func:cards/models.py.shareable_url",
    "func:cards/models.py.signup_bonus.get",
    "func:cards/models.py.str",
    "func:cards/models.py.uuid.uuid4",
    "func:cards/scenario_loader.py.FileNotFoundError",
    "func:cards/scenario_loader.py.ScenarioLoader.load_from_directory",
    "func:cards/scenario_loader.py.ScenarioLoader.load_scenarios",
    "func:cards/scenario_loader.py.ScenarioLoader.load_single_file",
    "func:cards/scenario_loader.py.ValueError",
    "func:cards/scenario_loader.py.all_scenarios.extend",
    "func:cards/scenario_loader.py.basename",
    "func:cards/scenario_loader.py.data.get",
    "func:cards/scenario_loader.py.exists",
    "func:cards/scenario_loader.py.f.endswith",
    "func:cards/scenario_loader.py.file_data.get",
    "func:cards/scenario_loader.py.get_scenario_by_name",
    "func:cards/scenario_loader.py.get_scenarios_path",
    "func:cards/scenario_loader.py.glob.glob",
    "func:cards/scenario_loader.py.isdir",
    "func:cards/scenario_loader.py.isfile",
    "func:cards/scenario_loader.py.join",
    "func:cards/scenario_loader.py.json.load",
    "func:cards/scenario_loader.py.len",
    "func:cards/scenario_loader.py.list_scenario_names",
    "func:cards/scenario_loader.py.load_from_directory",
    "func:cards/scenario_loader.py.load_scenarios",
    "func:cards/scenario_loader.py.load_single_file",
    "func:cards/scenario_loader.py.open",
    "func:cards/scenario_loader.py.scenario.get",
    "func:cards/scenario_loader.py.scenarios_data.get",
    "func:cards/scenario_loader.py.sorted",
    "func:cards/serializers.py.SpendingCategorySerializer",
    "func:cards/serializers.py.all",
    "func:cards/serializers.py.category_data.items",
    "func:cards/serializers.py.create",
    "func:cards/serializers.py.data.get",
    "func:cards/serializers.py.delete",
    "func:cards/serializers.py.exists",
    "func:cards/serializers.py.get_or_create",
    "func:cards/serializers.py.get_parent",
    "func:cards/serializers.py.get_subcategories",
    "func:cards/serializers.py.int",
    "func:cards/serializers.py.serializers.ValidationError",
    "func:cards/serializers.py.validate",
    "func:cards/views.py.CreateSpendingProfileSerializer",
    "func:cards/views.py.CreditCardListSerializer",
    "func:cards/views.py.GenerateRoadmapSerializer",
    "func:cards/views.py.Http404",
    "func:cards/views.py.Max",
    "func:cards/views.py.PageNumberPagination",
    "func:cards/views.py.Q",
    "func:cards/views.py.Response",
    "func:cards/views.py.UserCardCreateUpdateSerializer",
    "func:cards/views.py.UserCardSerializer",
    "func:cards/views.py.UserSpendingProfileSerializer",
    "func:cards/views.py.add_user_card",
    "func:cards/views.py.aggregate",
    "func:cards/views.py.all",
    "func:cards/views.py.api_view",
    "func:cards/views.py.card_recommendations_preview",
    "func:cards/views.py.card_search_view",
    "func:cards/views.py.cards_list_view",
    "func:cards/views.py.categories_data.append",
    "func:cards/views.py.categories_list_view",
    "func:cards/views.py.categories_with_rewards_view",
    "func:cards/views.py.category_detail_page_view",
    "func:cards/views.py.category_detail_view",
    "func:cards/views.py.check_card_ownership",
    "func:cards/views.py.count",
    "func:cards/views.py.dict",
    "func:cards/views.py.distinct",
    "func:cards/views.py.filter",
    "func:cards/views.py.first",
    "func:cards/views.py.float",
    "func:cards/views.py.get",
    "func:cards/views.py.get_object_or_404",
    "func:cards/views.py.get_or_create",
    "func:cards/views.py.get_profile_privacy",
    "func:cards/views.py.get_user_cards",
    "func:cards/views.py.index_view",
    "func:cards/views.py.issuers_list_view",
    "func:cards/views.py.landing_view",
    "func:cards/views.py.order_by",
    "func:cards/views.py.paginator.get_paginated_response",
    "func:cards/views.py.paginator.paginate_queryset",
    "func:cards/views.py.profile.generate_share_uuid",
    "func:cards/views.py.profile.save",
    "func:cards/views.py.profile_view",
    "func:cards/views.py.queryset.filter",
    "func:cards/views.py.queryset.order_by",
    "func:cards/views.py.remove_user_card",
    "func:cards/views.py.render",
    "func:cards/views.py.reward_categories.aggregate",
    "func:cards/views.py.select_related",
    "func:cards/views.py.serializer.generate_recommendations",
    "func:cards/views.py.serializer.is_valid",
    "func:cards/views.py.serializer.save",
    "func:cards/views.py.shared_profile_view",
    "func:cards/views.py.spending_profile_view",
    "func:cards/views.py.str",
    "func:cards/views.py.toggle_card_ownership",
    "func:cards/views.py.update_profile_privacy",
    "func:cards/views.py.update_user_card",
    "func:cards/views.py.user_card.delete",
    "func:cards/views.py.user_card.refresh_from_db",
    "func:cards/views.py.uuid.UUID",
    "func:convert_cards_data.py.append",
    "func:convert_cards_data.py.card_data.get",
    "func:convert_cards_data.py.cards_by_issuer.items",
    "func:convert_cards_data.py.categories.append",
    "func:convert_cards_data.py.convert_card",
    "func:convert_cards_data.py.defaultdict",
    "func:convert_cards_data.py.exists",
    "func:convert_cards_data.py.extract_reward_categories",
    "func:convert_cards_data.py.get",
    "func:convert_cards_data.py.issuer.lower",
    "func:convert_cards_data.py.issuer.replace",
    "func:convert_cards_data.py.issuer_mapping.get",
    "func:convert_cards_data.py.json.dump",
    "func:convert_cards_data.py.json.load",
    "func:convert_cards_data.py.len",
    "func:convert_cards_data.py.lower",
    "func:convert_cards_data.py.main",
    "func:convert_cards_data.py.map_issuer_name",
    "func:convert_cards_data.py.map_reward_type",
    "func:convert_cards_data.py.offer.get",
    "func:convert_cards_data.py.open",
    "func:convert_cards_data.py.print",
    "func:convert_cards_data.py.replace",
    "func:convert_cards_data.py.signup_bonus.get",
    "func:convert_cards_data.py.title",
    "func:creditcard_guru/urls.py.JsonResponse",
    "func:creditcard_guru/urls.py.get",
    "func:creditcard_guru/urls.py.home_view",
    "func:creditcard_guru/urls.py.render",
    "func:manage.py.ImportError",
    "func:manage.py.execute_from_command_line",
    "func:manage.py.main",
    "func:manage.py.setdefault",
    "func:roadmaps/models.py.__str__",
    "func:roadmaps/models.py.title",
    "func:roadmaps/recommendation_engine.py.Decimal",
    "func:roadmaps/recommendation_engine.py.__init__",
    "func:roadmaps/recommendation_engine.py._build_parent_category_spending",
    "func:roadmaps/recommendation_engine.py._calculate_card_allocated_breakdown",
    "func:roadmaps/recommendation_engine.py._calculate_card_annual_rewards",
    "func:roadmaps/recommendation_engine.py._calculate_card_credits_value",
    "func:roadmaps/recommendation_engine.py._calculate_card_rewards_breakdown",
    "func:roadmaps/recommendation_engine.py._calculate_portfolio_allocation",
    "func:roadmaps/recommendation_engine.py._calculate_portfolio_summary",
    "func:roadmaps/recommendation_engine.py._calculate_scenario_portfolio_value",
    "func:roadmaps/recommendation_engine.py._calculate_smart_card_value",
    "func:roadmaps/recommendation_engine.py._calculate_spending_efficiency",
    "func:roadmaps/recommendation_engine.py._calculate_total_rewards",
    "func:roadmaps/recommendation_engine.py._can_meet_signup_requirement",
    "func:roadmaps/recommendation_engine.py._evaluate_portfolio_scenario",
    "func:roadmaps/recommendation_engine.py._find_new_cards",
    "func:roadmaps/recommendation_engine.py._find_optimal_portfolio",
    "func:roadmaps/recommendation_engine.py._generate_card_reasoning",
    "func:roadmaps/recommendation_engine.py._generate_portfolio_optimized_recommendations",
    "func:roadmaps/recommendation_engine.py._get_best_signup_bonus_card",
    "func:roadmaps/recommendation_engine.py._get_filtered_cards",
    "func:roadmaps/recommendation_engine.py._get_signup_bonus_value",
    "func:roadmaps/recommendation_engine.py._is_eligible_for_card",
    "func:roadmaps/recommendation_engine.py._optimize_card_portfolio",
    "func:roadmaps/recommendation_engine.py._select_best_new_cards",
    "func:roadmaps/recommendation_engine.py._select_optimal_card_combination",
    "func:roadmaps/recommendation_engine.py.action.title",
    "func:roadmaps/recommendation_engine.py.actions.append",
    "func:roadmaps/recommendation_engine.py.actions.extend",
    "func:roadmaps/recommendation_engine.py.actions_summary.get",
    "func:roadmaps/recommendation_engine.py.all",
    "func:roadmaps/recommendation_engine.py.all_spending.items",
    "func:roadmaps/recommendation_engine.py.allocation_data.get",
    "func:roadmaps/recommendation_engine.py.any",
    "func:roadmaps/recommendation_engine.py.append",
    "func:roadmaps/recommendation_engine.py.breakdown_details.append",
    "func:roadmaps/recommendation_engine.py.breakdown_item.get",
    "func:roadmaps/recommendation_engine.py.calculate_portfolio_value",
    "func:roadmaps/recommendation_engine.py.card_action.get",
    "func:roadmaps/recommendation_engine.py.card_data.get",
    "func:roadmaps/recommendation_engine.py.card_scores.append",
    "func:roadmaps/recommendation_engine.py.card_scores.sort",
    "func:roadmaps/recommendation_engine.py.cards_to_apply.append",
    "func:roadmaps/recommendation_engine.py.cards_to_keep.append",
    "func:roadmaps/recommendation_engine.py.category_best_allocation.items",
    "func:roadmaps/recommendation_engine.py.category_best_allocation.values",
    "func:roadmaps/recommendation_engine.py.category_best_rates.items",
    "func:roadmaps/recommendation_engine.py.category_optimization.values",
    "func:roadmaps/recommendation_engine.py.category_slug.replace",
    "func:roadmaps/recommendation_engine.py.combinations",
    "func:roadmaps/recommendation_engine.py.count",
    "func:roadmaps/recommendation_engine.py.credits_breakdown.append",
    "func:roadmaps/recommendation_engine.py.date",
    "func:roadmaps/recommendation_engine.py.datetime.now",
    "func:roadmaps/recommendation_engine.py.defaultdict",
    "func:roadmaps/recommendation_engine.py.delete",
    "func:roadmaps/recommendation_engine.py.dict",
    "func:roadmaps/recommendation_engine.py.enumerate",
    "func:roadmaps/recommendation_engine.py.exists",
    "func:roadmaps/recommendation_engine.py.filter",
    "func:roadmaps/recommendation_engine.py.filtered_breakdown.append",
    "func:roadmaps/recommendation_engine.py.final_allocation.values",
    "func:roadmaps/recommendation_engine.py.first",
    "func:roadmaps/recommendation_engine.py.float",
    "func:roadmaps/recommendation_engine.py.full_optimization.get",
    "func:roadmaps/recommendation_engine.py.generate_quick_recommendations",
    "func:roadmaps/recommendation_engine.py.generate_roadmap",
    "func:roadmaps/recommendation_engine.py.get",
    "func:roadmaps/recommendation_engine.py.getattr",
    "func:roadmaps/recommendation_engine.py.hasattr",
    "func:roadmaps/recommendation_engine.py.int",
    "func:roadmaps/recommendation_engine.py.items",
    "func:roadmaps/recommendation_engine.py.len",
    "func:roadmaps/recommendation_engine.py.list",
    "func:roadmaps/recommendation_engine.py.lower",
    "func:roadmaps/recommendation_engine.py.map",
    "func:roadmaps/recommendation_engine.py.match.group",
    "func:roadmaps/recommendation_engine.py.max",
    "func:roadmaps/recommendation_engine.py.min",
    "func:roadmaps/recommendation_engine.py.mock_user_cards.append",
    "func:roadmaps/recommendation_engine.py.other_keeps_applies.sort",
    "func:roadmaps/recommendation_engine.py.parent_category_spending.get",
    "func:roadmaps/recommendation_engine.py.parent_category_spending.keys",
    "func:roadmaps/recommendation_engine.py.parent_category_spending.values",
    "func:roadmaps/recommendation_engine.py.parse_date",
    "func:roadmaps/recommendation_engine.py.portfolio_allocation.items",
    "func:roadmaps/recommendation_engine.py.portfolio_allocation.values",
    "func:roadmaps/recommendation_engine.py.portfolio_summary.get",
    "func:roadmaps/recommendation_engine.py.print",
    "func:roadmaps/recommendation_engine.py.queryset.filter",
    "func:roadmaps/recommendation_engine.py.queryset.prefetch_related",
    "func:roadmaps/recommendation_engine.py.range",
    "func:roadmaps/recommendation_engine.py.re.search",
    "func:roadmaps/recommendation_engine.py.rec.get",
    "func:roadmaps/recommendation_engine.py.recommendations.append",
    "func:roadmaps/recommendation_engine.py.remaining_cards.sort",
    "func:roadmaps/recommendation_engine.py.replace",
    "func:roadmaps/recommendation_engine.py.rewards_breakdown.get",
    "func:roadmaps/recommendation_engine.py.saved_recommendations.append",
    "func:roadmaps/recommendation_engine.py.scenarios.append",
    "func:roadmaps/recommendation_engine.py.select_related",
    "func:roadmaps/recommendation_engine.py.self._build_parent_category_spending",
    "func:roadmaps/recommendation_engine.py.self._calculate_card_allocated_breakdown",
    "func:roadmaps/recommendation_engine.py.self._calculate_card_credits_value",
    "func:roadmaps/recommendation_engine.py.self._calculate_card_rewards_breakdown",
    "func:roadmaps/recommendation_engine.py.self._calculate_portfolio_allocation",
    "func:roadmaps/recommendation_engine.py.self._calculate_portfolio_summary",
    "func:roadmaps/recommendation_engine.py.self._calculate_scenario_portfolio_value",
    "func:roadmaps/recommendation_engine.py.self._calculate_smart_card_value",
    "func:roadmaps/recommendation_engine.py.self._calculate_spending_efficiency",
    "func:roadmaps/recommendation_engine.py.self._calculate_total_rewards",
    "func:roadmaps/recommendation_engine.py.self._can_meet_signup_requirement",
    "func:roadmaps/recommendation_engine.py.self._evaluate_portfolio_scenario",
    "func:roadmaps/recommendation_engine.py.self._find_optimal_portfolio",
    "func:roadmaps/recommendation_engine.py.self._generate_card_reasoning",
    "func:roadmaps/recommendation_engine.py.self._generate_portfolio_optimized_recommendations",
    "func:roadmaps/recommendation_engine.py.self._get_best_signup_bonus_card",
    "func:roadmaps/recommendation_engine.py.self._get_filtered_cards",
    "func:roadmaps/recommendation_engine.py.self._get_signup_bonus_value",
    "func:roadmaps/recommendation_engine.py.self._is_eligible_for_card",
    "func:roadmaps/recommendation_engine.py.self._optimize_card_portfolio",
    "func:roadmaps/recommendation_engine.py.self._select_best_new_cards",
    "func:roadmaps/recommendation_engine.py.self._select_optimal_card_combination",
    "func:roadmaps/recommendation_engine.py.self.generate_quick_recommendations",
    "func:roadmaps/recommendation_engine.py.set",
    "func:roadmaps/recommendation_engine.py.signup_bonus.get",
    "func:roadmaps/recommendation_engine.py.signup_bonus_allocations.get",
    "func:roadmaps/recommendation_engine.py.spending_by_category.items",
    "func:roadmaps/recommendation_engine.py.split",
    "func:roadmaps/recommendation_engine.py.str",
    "func:roadmaps/recommendation_engine.py.sum",
    "func:roadmaps/recommendation_engine.py.timedelta",
    "func:roadmaps/recommendation_engine.py.title",
    "func:roadmaps/recommendation_engine.py.type",
    "func:roadmaps/recommendation_engine.py.unique_credits.add",
    "func:roadmaps/recommendation_engine.py.update_or_create",
    "func:roadmaps/recommendation_engine.py.upper",
    "func:roadmaps/recommendation_engine.py.values",
    "func:roadmaps/recommendation_engine.py.values_list",
    "func:roadmaps/serializers.py.RecommendationEngine",
    "func:roadmaps/serializers.py.add",
    "func:roadmaps/serializers.py.all",
    "func:roadmaps/serializers.py.card_data.get",
    "func:roadmaps/serializers.py.clear",
    "func:roadmaps/serializers.py.create",
    "func:roadmaps/serializers.py.delete",
    "func:roadmaps/serializers.py.engine.generate_quick_recommendations",
    "func:roadmaps/serializers.py.filter",
    "func:roadmaps/serializers.py.first",
    "func:roadmaps/serializers.py.generate_recommendations",
    "func:roadmaps/serializers.py.get",
    "func:roadmaps/serializers.py.get_or_create",
    "func:roadmaps/serializers.py.int",
    "func:roadmaps/serializers.py.items",
    "func:roadmaps/serializers.py.roadmap.delete",
    "func:roadmaps/serializers.py.roadmap.save",
    "func:roadmaps/serializers.py.set",
    "func:roadmaps/serializers.py.setattr",
    "func:roadmaps/serializers.py.validated_data.get",
    "func:roadmaps/serializers.py.validated_data.items",
    "func:roadmaps/serializers.py.validated_data.pop",
    "func:roadmaps/serializers.py.values_list",
    "func:roadmaps/views.py.Avg",
    "func:roadmaps/views.py.Count",
    "func:roadmaps/views.py.CreateRoadmapSerializer",
    "func:roadmaps/views.py.GenerateRoadmapSerializer",
    "func:roadmaps/views.py.RecommendationEngine",
    "func:roadmaps/views.py.Response",
    "func:roadmaps/views.py.RoadmapSerializer",
    "func:roadmaps/views.py.Sum",
    "func:roadmaps/views.py.api_view",
    "func:roadmaps/views.py.create_roadmap_view",
    "func:roadmaps/views.py.engine.generate_roadmap",
    "func:roadmaps/views.py.export_scenario_view",
    "func:roadmaps/views.py.filter",
    "func:roadmaps/views.py.float",
    "func:roadmaps/views.py.generate_roadmap_view",
    "func:roadmaps/views.py.get",
    "func:roadmaps/views.py.get_object_or_404",
    "func:roadmaps/views.py.get_queryset",
    "func:roadmaps/views.py.isoformat",
    "func:roadmaps/views.py.none",
    "func:roadmaps/views.py.order_by",
    "func:roadmaps/views.py.portfolio_summary.get",
    "func:roadmaps/views.py.prefetch_related",
    "func:roadmaps/views.py.queryset.aggregate",
    "func:roadmaps/views.py.queryset.order_by",
    "func:roadmaps/views.py.quick_recommendation_view",
    "func:roadmaps/views.py.rec.get",
    "func:roadmaps/views.py.roadmap.refresh_from_db",
    "func:roadmaps/views.py.roadmap_stats_view",
    "func:roadmaps/views.py.round",
    "func:roadmaps/views.py.serializer.generate_recommendations",
    "func:roadmaps/views.py.serializer.is_valid",
    "func:roadmaps/views.py.serializer.save",
    "func:roadmaps/views.py.str",
    "func:roadmaps/views.py.sum",
    "func:roadmaps/views.py.timezone.now",
    "func:setup_data.py.Path",
    "func:setup_data.py.exists",
    "func:setup_data.py.f.endswith",
    "func:setup_data.py.get",
    "func:setup_data.py.glob.glob",
    "func:setup_data.py.len",
    "func:setup_data.py.line.strip",
    "func:setup_data.py.main",
    "func:setup_data.py.print",
    "func:setup_data.py.replace",
    "func:setup_data.py.run_command",
    "func:setup_data.py.sorted",
    "func:setup_data.py.split",
    "func:setup_data.py.strip",
    "func:setup_data.py.subprocess.run",
    "func:setup_data.py.sys.exit",
    "func:setup_data.py.title",
    "func:split_scenarios.py.any",
    "func:split_scenarios.py.append",
    "func:split_scenarios.py.categories.items",
    "func:split_scenarios.py.categorize_scenarios",
    "func:split_scenarios.py.create_index_file",
    "func:split_scenarios.py.files_created.append",
    "func:split_scenarios.py.join",
    "func:split_scenarios.py.json.dump",
    "func:split_scenarios.py.json.load",
    "func:split_scenarios.py.len",
    "func:split_scenarios.py.load_scenarios",
    "func:split_scenarios.py.name.lower",
    "func:split_scenarios.py.open",
    "func:split_scenarios.py.os.makedirs",
    "func:split_scenarios.py.print",
    "func:split_scenarios.py.replace",
    "func:split_scenarios.py.sum",
    "func:split_scenarios.py.write_scenario_files",
    "func:users/models.py.__str__",
    "func:users/serializers.py.create",
    "func:users/serializers.py.delete",
    "func:users/serializers.py.exclude",
    "func:users/serializers.py.filter",
    "func:users/serializers.py.get",
    "func:users/serializers.py.get_or_create",
    "func:users/serializers.py.hasattr",
    "func:users/serializers.py.list",
    "func:users/serializers.py.preferences_data.items",
    "func:users/serializers.py.prefs.save",
    "func:users/serializers.py.select_related",
    "func:users/serializers.py.setattr",
    "func:users/serializers.py.spending_data.items",
    "func:users/serializers.py.to_representation",
    "func:users/serializers.py.update_or_create",
    "func:users/serializers.py.validated_data.get",
    "func:users/serializers.py.values_list",
    "func:users/views.py.Response",
    "func:users/views.py.UserCardSerializer",
    "func:users/views.py.UserDataSerializer",
    "func:users/views.py.UserSerializer",
    "func:users/views.py.api_view",
    "func:users/views.py.date",
    "func:users/views.py.filter",
    "func:users/views.py.get",
    "func:users/views.py.get_object",
    "func:users/views.py.get_or_create",
    "func:users/views.py.get_queryset",
    "func:users/views.py.get_user_cards_details",
    "func:users/views.py.perform_create",
    "func:users/views.py.permission_classes",
    "func:users/views.py.select_related",
    "func:users/views.py.serializer.create",
    "func:users/views.py.serializer.is_valid",
    "func:users/views.py.serializer.save",
    "func:users/views.py.serializer.to_representation",
    "func:users/views.py.str",
    "func:users/views.py.timezone.now",
    "func:users/views.py.toggle_user_card",
    "func:users/views.py.update",
    "func:users/views.py.update_user_card_details",
    "func:users/views.py.user_card.save",
    "func:users/views.py.user_data_view",
    "func:users/views.py.user_status_view"
  ],
  "method": [
    "meth:cards/management/commands/import_cards.py.Command.add_arguments",
    "meth:cards/management/commands/import_cards.py.Command.handle",
    "meth:cards/management/commands/import_cards.py.Command.import_card_credits",
    "meth:cards/management/commands/import_cards.py.Command.import_credit_cards",
    "meth:cards/management/commands/import_cards.py.Command.import_data",
    "meth:cards/management/commands/import_cards.py.Command.import_issuers",
    "meth:cards/management/commands/import_cards.py.Command.import_personal_cards",
    "meth:cards/management/commands/import_cards.py.Command.import_reward_categories",
    "meth:cards/management/commands/import_cards.py.Command.import_reward_types",
    "meth:cards/management/commands/import_cards.py.Command.import_spending_categories",
    "meth:cards/management/commands/import_credit_types.py.Command.categorize_credit",
    "meth:cards/management/commands/import_credit_types.py.Command.get_credit_icon",
    "meth:cards/management/commands/import_credit_types.py.Command.get_sort_order",
    "meth:cards/management/commands/import_credit_types.py.Command.handle",
    "meth:cards/management/commands/import_credit_types.py.Command.normalize_credit_description",
    "meth:cards/management/commands/import_spending_credits.py.Command.add_arguments",
    "meth:cards/management/commands/import_spending_credits.py.Command.handle",
    "meth:cards/management/commands/run_scenario.py.Command.add_arguments",
    "meth:cards/management/commands/run_scenario.py.Command.create_credit_card",
    "meth:cards/management/commands/run_scenario.py.Command.create_credit_card_from_name",
    "meth:cards/management/commands/run_scenario.py.Command.create_credit_card_from_slug",
    "meth:cards/management/commands/run_scenario.py.Command.create_test_scenario",
    "meth:cards/management/commands/run_scenario.py.Command.create_test_setup_data",
    "meth:cards/management/commands/run_scenario.py.Command.display_results",
    "meth:cards/management/commands/run_scenario.py.Command.handle",
    "meth:cards/management/commands/run_scenario.py.Command.list_scenarios",
    "meth:cards/management/commands/run_scenario.py.Command.run_all_scenarios",
    "meth:cards/management/commands/run_scenario.py.Command.run_scenario",
    "meth:cards/management/commands/run_scenario.py.Command.run_single_scenario",
    "meth:cards/management/commands/run_scenario.py.Command.setup_test_data",
    "meth:cards/management/commands/run_scenario.py.Command.validate_breakdown_accuracy",
    "meth:cards/management/commands/run_scenario.py.Command.validate_card_count_optimization",
    "meth:cards/management/commands/run_scenario.py.Command.validate_expectations",
    "meth:cards/management/commands/run_scenario.py.Command.validate_portfolio_optimization",
    "meth:cards/management/commands/run_scenario.py.Command.validate_zero_fee_optimization",
    "meth:cards/models.py.CardCredit.__str__",
    "meth:cards/models.py.CardCredit.annual_value",
    "meth:cards/models.py.CreditCard.__str__",
    "meth:cards/models.py.CreditCard.apply_url",
    "meth:cards/models.py.CreditCard.referral_url",
    "meth:cards/models.py.CreditType.__str__",
    "meth:cards/models.py.Issuer.__str__",
    "meth:cards/models.py.RewardCategory.__str__",
    "meth:cards/models.py.RewardType.__str__",
    "meth:cards/models.py.SpendingAmount.__str__",
    "meth:cards/models.py.SpendingCategory.__str__",
    "meth:cards/models.py.SpendingCategory.is_parent_category",
    "meth:cards/models.py.SpendingCategory.is_subcategory",
    "meth:cards/models.py.SpendingCredit.__str__",
    "meth:cards/models.py.UserCard.__str__",
    "meth:cards/models.py.UserCard.display_name",
    "meth:cards/models.py.UserCard.is_active",
    "meth:cards/models.py.UserCreditPreference.__str__",
    "meth:cards/models.py.UserSpendingCreditPreference.__str__",
    "meth:cards/models.py.UserSpendingProfile.__str__",
    "meth:cards/models.py.UserSpendingProfile.generate_share_uuid",
    "meth:cards/models.py.UserSpendingProfile.is_public",
    "meth:cards/models.py.UserSpendingProfile.shareable_url",
    "meth:cards/scenario_loader.py.ScenarioLoader.get_scenario_by_name",
    "meth:cards/scenario_loader.py.ScenarioLoader.list_scenario_names",
    "meth:cards/scenario_loader.py.ScenarioLoader.load_from_directory",
    "meth:cards/scenario_loader.py.ScenarioLoader.load_scenarios",
    "meth:cards/scenario_loader.py.ScenarioLoader.load_single_file",
    "meth:cards/serializers.py.CreateSpendingProfileSerializer.create",
    "meth:cards/serializers.py.SpendingCategorySerializer.get_parent",
    "meth:cards/serializers.py.SpendingCategorySerializer.get_subcategories",
    "meth:cards/serializers.py.UserCardSerializer.validate",
    "meth:roadmaps/models.py.Roadmap.__str__",
    "meth:roadmaps/models.py.RoadmapCalculation.__str__",
    "meth:roadmaps/models.py.RoadmapFilter.__str__",
    "meth:roadmaps/models.py.RoadmapRecommendation.__str__",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine.__init__",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._build_parent_category_spending",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_card_allocated_breakdown",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_card_annual_rewards",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_card_credits_value",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_card_rewards_breakdown",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_portfolio_allocation",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_portfolio_summary",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_scenario_portfolio_value",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_smart_card_value",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_spending_efficiency",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._calculate_total_rewards",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._can_meet_signup_requirement",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._evaluate_portfolio_scenario",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._find_new_cards",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._find_optimal_portfolio",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._generate_card_reasoning",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._generate_portfolio_optimized_recommendations",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._get_best_signup_bonus_card",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._get_filtered_cards",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._get_signup_bonus_value",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._is_eligible_for_card",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._optimize_card_portfolio",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._select_best_new_cards",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine._select_optimal_card_combination",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine.generate_quick_recommendations",
    "meth:roadmaps/recommendation_engine.py.RecommendationEngine.generate_roadmap",
    "meth:roadmaps/serializers.py.CreateRoadmapSerializer.create",
    "meth:roadmaps/serializers.py.GenerateRoadmapSerializer.generate_recommendations",
    "meth:roadmaps/views.py.RoadmapDetailView.get_queryset",
    "meth:roadmaps/views.py.RoadmapListView.get_queryset",
    "meth:users/models.py.UserPreferences.__str__",
    "meth:users/models.py.UserProfile.__str__",
    "meth:users/serializers.py.UserDataSerializer.create",
    "meth:users/serializers.py.UserDataSerializer.to_representation",
    "meth:users/views.py.UserCardDetailView.get_queryset",
    "meth:users/views.py.UserCardListView.get_queryset",
    "meth:users/views.py.UserCardListView.perform_create",
    "meth:users/views.py.UserPreferencesView.get_object",
    "meth:users/views.py.UserProfileView.get_object",
    "meth:users/views.py.UserSpendingListView.get_queryset",
    "meth:users/views.py.UserSpendingListView.perform_create"
  ],
  "module": [
    "mod:admin",
    "mod:analyze_scenarios",
    "mod:argparse",
    "mod:cards.__init__",
    "mod:cards.admin",
    "mod:cards.apps",
    "mod:cards.management.__init__",
    "mod:cards.management.commands.__init__",
    "mod:cards.management.commands.import_cards",
    "mod:cards.management.commands.import_credit_types",
    "mod:cards.management.commands.import_spending_credits",
    "mod:cards.management.commands.run_scenario",
    "mod:cards.migrations.0001_initial",
    "mod:cards.migrations.__init__",
    "mod:cards.models",
    "mod:cards.scenario_loader",
    "mod:cards.serializers",
    "mod:cards.tests",
    "mod:cards.urls",
    "mod:cards.views",
    "mod:collections",
    "mod:convert_cards_data",
    "mod:creditcard_guru.__init__",
    "mod:creditcard_guru.asgi",
    "mod:creditcard_guru.settings",
    "mod:creditcard_guru.urls",
    "mod:creditcard_guru.wsgi",
    "mod:datetime",
    "mod:decimal",
    "mod:decouple",
    "mod:dj_database_url",
    "mod:django",
    "mod:django/conf",
    "mod:django/contrib",
    "mod:django/core/management",
    "mod:django/core/management/base",
    "mod:django/core/validators",
    "mod:django/db",
    "mod:django/db/models/deletion",
    "mod:django/http",
    "mod:django/shortcuts",
    "mod:django/test",
    "mod:django/utils",
    "mod:django/utils/dateparse",
    "mod:django/utils/text",
    "mod:django_filters/rest_framework",
    "mod:glob",
    "mod:itertools",
    "mod:json",
    "mod:manage",
    "mod:os",
    "mod:pathlib",
    "mod:re",
    "mod:rest_framework",
    "mod:rest_framework/decorators",
    "mod:rest_framework/pagination",
    "mod:rest_framework/permissions",
    "mod:rest_framework/response",
    "mod:roadmaps.__init__",
    "mod:roadmaps.admin",
    "mod:roadmaps.apps",
    "mod:roadmaps.migrations.0001_initial",
    "mod:roadmaps.migrations.__init__",
    "mod:roadmaps.models",
    "mod:roadmaps.recommendation_engine",
    "mod:roadmaps.serializers",
    "mod:roadmaps.tests",
    "mod:roadmaps.urls",
    "mod:roadmaps.views",
    "mod:setup_data",
    "mod:split_scenarios",
    "mod:subprocess",
    "mod:sys",
    "mod:typing",
    "mod:users.__init__",
    "mod:users.admin",
    "mod:users.apps",
    "mod:users.migrations.0001_initial",
    "mod:users.migrations.__init__",
    "mod:users.models",
    "mod:users.serializers",
    "mod:users.tests",
    "mod:users.urls",
    "mod:users.views",
    "mod:uuid",
    "mod:wsgi"
  ]
}